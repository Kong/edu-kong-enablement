image:
  ## Using Kong Official Image an tag
  repository: kong/kong-gateway
  tag: "3.7.0.0"
  ## Using Custom Image and tag
  # repository: <CHANGEME>/kong-gateway
  # tag: "<CHANGEME>"

secretVolumes:
- kong-cluster-cert

admin:
  enabled: false

manager:
  enabled: false

env:
  role: data_plane
  database: "off"
  ## To be used by data plane nodes only: address of the control plane node from which configuration updates will be fetched, in host:port format. Provide all the CP deployed in Konnect information over here. Make sure you have the correct CP Id in cluster_control_plane, cluster_server_name, cluster_telemetry_endpoint, cluster_telemetry_server_name
  cluster_mtls: pki
  cluster_control_plane: <changeme>.us.cp0.konghq.com:443
  cluster_server_name: <changeme>.us.cp0.konghq.com
  cluster_telemetry_endpoint: <changeme>.us.tp0.konghq.com:443
  cluster_telemetry_server_name: <changeme>.us.tp0.konghq.com
  cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  lua_ssl_trusted_certificate: system
  konnect_mode: "on"
  vitals: "off"
  nginx_worker_processes: "2"

ingressController:
  enabled: false
  installCRDs: false


## Specify Kong Proxy service and listener configuration
proxy:
  ## Enable creating a Kubernetes service for the proxy
  ## Disabling this is recommended for most ingress controller configurations
  ## Enterprise users that wish to use Kong Manager with the controller should enable this
  enabled: true
  type: LoadBalancer
  ## To specify annotations or labels for the proxy service, add them to the respective
  ## "annotations" or "labels" dictionaries below.
  annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-scheme: internal
    # # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    # # service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
    # service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8100"
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /status
  labels: {}

  http:
    ## Enable plaintext HTTP listen for the proxy
    ## Disabling this and using a TLS listen only is recommended for most configuration
    enabled: true
    servicePort: 8000
    containerPort: 8000
    ## Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    ## Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []

  tls:
    ## Enable HTTPS listen for the proxy
    enabled: true
    servicePort: 8443
    containerPort: 8443
    ## Set a target port for the TLS port in the proxy service, useful when using TLS
    ## termination on an ELB.
    ## overrideServiceTargetPort: 8000
    ## Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    ## Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2

  ## Kong proxy ingress settings.
  ## Note: You need this only if you are using another Ingress Controller
  ## to expose Kong outside the k8s cluster.
  ingress:
    ## Enable/disable exposure using ingress.
    enabled: false
    ingressClassName:
    ## TLS secret name.
    # tls: kong-proxy.example.com-tls
    ## Ingress hostname
    hostname:
    ## Example Map of ingress annotations.
    annotations: {}
      # alb.ingress.kubernetes.io/load-balancer-attributes: routing.http.drop_invalid_header_fields.enabled=true,access_logs.s3.enabled=true,access_logs.s3.bucket=sirius-elb-logs-dev,access_logs.s3.prefix=logs/apiplatform-cp-private
      # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig":
      #   { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      # alb.ingress.kubernetes.io/backend-protocol: HTTPS
      # alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-west-2:109421013472:certificate/eb795723-223b-4518-bea0-9126e4293f93"
      # alb.ingress.kubernetes.io/group.name: internal-cp-ingress-kong-alb
      # alb.ingress.kubernetes.io/healthcheck-path: /
      # alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
      # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443},{"HTTP": 80}]'
      # alb.ingress.kubernetes.io/scheme: internal
      # alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
      # alb.ingress.kubernetes.io/success-codes: 200,401,403,404
      # alb.ingress.kubernetes.io/subnets: ROUTABLE-eu-west-2a,ROUTABLE-eu-west-2b,ROUTABLE-eu-west-2c
      # alb.ingress.kubernetes.io/tags: EXCLUDE_DEFAULT_WAF_POLICY=
      # alb.ingress.kubernetes.io/target-type: ip
      # kubernetes.io/ingress.class: alb
    ## Ingress path.
    path: /


# Specify Kong status listener configuration
# This listen is internal-only. It cannot be exposed through a service or ingress.
status:
  enabled: true
  http:
    ## Enable plaintext HTTP listen for the status listen
    enabled: true
    containerPort: 8100
    parameters: []

  tls:
    ## Enable HTTPS listen for the status listen
    ## Kong versions prior to 2.1 do not support TLS status listens.
    ## This setting must remain false on those versions
    enabled: true
    containerPort: 8543
    parameters: []

# readinessProbe for Kong pods
readinessProbe:
  failureThreshold: 3
  httpGet:
    path: /status/ready
    port: 8543
    scheme: HTTPS
  initialDelaySeconds: 40
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 30

# livenessProbe for Kong pods
livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /status/ready
    port: 8543
    scheme: HTTPS
  initialDelaySeconds: 80
  periodSeconds: 20
  successThreshold: 1
  timeoutSeconds: 30  

# If you want to specify resources, uncomment the following
# lines, adjust them as necessary.
resources:
  limits:
   cpu: 2
   memory: 2048M
  requests:
   cpu: 100m
   memory: 512M


# Enable autoscaling using HorizontalPodAutoscaler
# When configuring an HPA, you must set resource requests on all containers via
# "resources" and, if using the controller, "ingressController.resources" in values.yaml
# Kong pod count.
# It has no effect when autoscaling.enabled is set to true
replicaCount: 1
autoscaling:
  enabled: false
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      selectPolicy: Max
  minReplicas: 2
  maxReplicas: 3
  ## targetCPUUtilizationPercentage only used if the cluster doesn't support autoscaling/v2beta
  targetCPUUtilizationPercentage:
  ## Otherwise for clusters that do support autoscaling/v2beta, use metrics
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80

